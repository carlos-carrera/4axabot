import TextRenderer from './renderers/text-renderer';
import HeroRenderer from './renderers/hero-renderer';
import ThumbnailRenderer from './renderers/thumbnail-renderer';
import ChoiceRenderer from './renderers/choice-renderer';
import CarouselRenderer from './renderers/carousel-renderer';
import ImageRenderer from './renderers/image-renderer';
import ListRenderer from './renderers/list-renderer';
import PromptRenderer from './renderers/prompt-renderer';
import winston from 'winston';

/**
 * Factory of bot renderers.
 * Renderers can be added by card type and channel name, for the specific
 * implementations for a channel, or can be added only by card type, so
 * if no specific implementation exists then this default renderer is
 * returned.
 */
class BotRenderFactory {
  /**
   * Constructor of the class.
   * @constructor
   * @param bot { Object } Parent bot instance.
   */
  constructor(bot) {
    winston.log('info', 'Creating Render Factory.');
    this.bot = bot;
    this.renderersByType = {};
    this.renderersByChannel = {};
    this.addDefaultRenderers();
  }

  /**
   * Add a renderer by card type.
   *
   * @param cardType { String } Card type.
   * @param renderer { Object } Renderer instance.
   */
  addRendererByType(cardType, renderer) {
    winston.log('info', 'Adding renderer by type: ' + cardType);
    this.renderersByType[cardType] = renderer;
  }

  /**
   * Gets a renderer by card type.
   *
   * @param cardType { String } Card type.
   * @returns { Object } Renderer instance.
   */
  getRendererByType(cardType) {
    return this.renderersByType[cardType];
  }

  /**
   * Add a renderer by the channel name and card type.
   *
   * @param cardType { String } Card type.
   * @param channel { String } Channel name.
   * @param renderer { Object } Renderer instance.
   */
  addRendererByChannel(cardType, channel, renderer) {
    winston.log('info', 'Adding renderer by channel. Channel:' + channel +
      ' Type: ' + cardType);
    if (!this.renderersByChannel[cardType]) {
      this.renderersByChannel[cardType] = {};
    }
    this.renderersByChannel[cardType][channel] = renderer;
  }

  /**
   * Gets a renderer by the channel name and the card type.
   *
   * @param cardType { String } Card type.
   * @param channel { String } Channel name.
   * @returns { Object } Renderer instance or undefined if does not exists.
   */
  getRendererByChannel(cardType, channel) {
    if (!this.renderersByChannel[cardType]) {
      return undefined;
    }
    return this.renderersByChannel[cardType][channel];
  }

  /**
   * Gets a render by the channel name and the card type. If no renderer by
   * channel name exists, then falls to the default renderers by card type.
   *
   * @param cardType { String } Card type.
   * @param channel { String } Channel name.
   * @returns { Object } Renderer instance or undefined if does not exists.
   */
  getRenderer(cardType, channel) {
    var result = this.getRendererByChannel(cardType, channel);
    if (!result) {
      result = this.getRendererByType(cardType);
    }
    return result;
  }

  /**
   * Adds the default card renderers into the factory.
   */
  addDefaultRenderers() {
    this.addRendererByType('text', new TextRenderer(this.bot));
    this.addRendererByType('hero', new HeroRenderer(this.bot));
    this.addRendererByType('thumbnail', new ThumbnailRenderer(this.bot));
    this.addRendererByType('choice', new ChoiceRenderer(this.bot));
    this.addRendererByType('carousel', new CarouselRenderer(this.bot));
    this.addRendererByType('image', new ImageRenderer(this.bot));
    this.addRendererByType('list', new ListRenderer(this.bot));
    this.addRendererByType('prompt', new PromptRenderer(this.bot));
  }
}

export default BotRenderFactory;
