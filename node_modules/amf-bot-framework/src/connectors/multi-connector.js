import BaseConnector from './base-connector';
import _ from 'lodash';
import winston from 'winston';

/**
 * Class for the Multi Connector, the connector that is able to use several
 * connectors in order to use our bot in different platforms without going
 * through Microsoft.
 */
class MultiConnector extends BaseConnector {

  /**
   * Constructor of the class.
   *
   * @constructor
   * @param settings { Object } Settings of the connector.
   */
  constructor(settings) {
    winston.log('info', 'Creating MultiConnector instance');
    super(settings);
    this.connectors = [];
  }

  /**
   * Adds a new connector to the Multi Connector. The name is the channel
   * identifier that come in the JSON input message, example: 'facebook',
   * 'slack', 'emulator',...
   *
   * @param name { String } Channel name.
   * @param connector { Object } Connector instance.
   */
  addConnector(name, connector) {
    winston.log('info', 'Adding connector ' + name + ' to MultiConnector');
    this.connectors[name] = connector;
  }

  /**
   * Gets a connector given the channel name.
   *
   * @param name { String } Channel name.
   * @returns { Object } Connector instance if found, otherwise undefined.
   */
  getConnector(name) {
    winston.log('debug', 'Getting connector ' + name + ' from MultiConnector');
    return this.connectors[name];
  }

  /**
   * React to the onEvent launched by the framework, passing the
   * handler for the messages.
   *
   * @param handler { Function } Handler function injected from the bot.
   */
  onEvent(handler) {
    winston.log('debug', 'Registering onEvent at MultiConnector');
    this.handler = handler;
    for (var name in this.connectors) {
      this.connectors[name].onEvent(handler);
    }
  }

  /**
   * Returns a function that given a request is able to verify the
   * authorization of the request.
   *
   * @param name { String } Channel name.
   * @returns { Function } Function that verify the request.
   */
  verify(name) {
    return this.getConnector(name).verify();
  }

  /**
   * Returns a function that reacts to the incoming messages from the user.
   *
   * @param name { String } Channel name.
   * @returns { Function } Function that reacts to the request.
   */
  listen(name) {
    return this.getConnector(name).listen();
  }

  /**
   * Method for sending messages from the bot to the channel.
   *
   * @param messages { Array } Array of outcoming messages.
   * @param done { Function } Callback function.
   */
  send(messages, done) {
    var msg = _.isArray(messages) ? messages[0] : messages;
    var name = msg.address.channelId;
    return this.getConnector(name).send(messages, done);
  }
}

export default MultiConnector;