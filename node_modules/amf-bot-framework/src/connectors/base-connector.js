import async from 'async';
import winston from 'winston';
import moment from 'moment';

/**
 * Abstract class for the base connector able to integrate with the
 * Microsoft Bot Framework.
 * All other connectors can inherit the structure and some
 * features from this one.
 *
 * Usually you'll want to override some of this methods:
 * - checkBody
 * - getInputMessages
 * - getOutputMessages
 * - verifyRequest
 * - sendMessage
 */
class BaseConnector {

  /**
   * Constructor of the class.
   *
   * @constructor
   * @param settings { Object } Settings of the connector.
   */
  constructor(settings) {
    winston.log('debug', 'Creating Base Connector. Settings:');
    this.settings = settings || {};
    this.settings.autoResponse = this.settings.autoResponse || true;
    winston.log('debug', this.settings);
  }

  /**
   * React to the onEvent launched by the framework, passing the
   * handler for the messages.
   *
   * @param handler { Function } Handler function injected from the bot.
   */
  onEvent(handler) {
    winston.log('debug', 'BaseConnector, reacting to the onEvent.');
    this.handler = handler;
  }

  /**
   * Returns a function that given a request is able to verify the
   * authorization of the request.
   * This method is used by channels that verify the connection before
   * starting the dialogs, like Facebook.
   *
   * @returns { Function } Function that verify the request.
   */
  verify() {
    winston.log('debug', 'BaseConnector, sending the verify function.');
    return function(req, res) {
      async.series([
        this.buildBody.bind(this, req),
        this.verifyRequest.bind(this, req, res)
      ], function(error) {
        if (error) {
          winston.log('error', error);
        }
      });
    }.bind(this);
  }

  /**
   * Returns a function that reacts to the incoming messages from the user.
   * This method is the main receive one used by the bot.
   *
   * @returns { Function } Function that reacts to the request.
   */
  listen() {
    winston.log('debug', 'BaseConnector, sending the listen function.');
    return function(req, res) {
      async.series([
        this.buildBody.bind(this, req),
        this.checkBody.bind(this, req, res),
        this.dispatch.bind(this, req, res)
      ], function(error) {
        if (error) {
          winston.log('error', error);
        }
      });
    }.bind(this);
  }

  /**
   * Gets a query parameter from a request, by name.
   *
   * @param req { Object } Request instance.
   * @param name { String } Name of the parameter.
   * @returns { String } Value of the query parameter.
   */
  getQueryParameter(req, name) {
    var result = req[name];
    if (!result && req.query) {
      result = req.query[name];
    }
    return result;
  }

  /**
   * Given a request, build the body. This is done because the body of a
   * request can come directly or can be built by chunks. This method
   * does the job of building the body, asynchronous mode.
   *
   * @param req { Object } Request instance.
   * @param cb { Function } Callback function.
   */
  buildBody(req, cb) {
    winston.log('debug', 'BaseConnector, building request body');
    if (req.method === 'GET') {
      return cb();
    }
    if (req.body) {
      return cb();
    }
    var requestData = '';
    req.on('data', function(chunk) {
      requestData += chunk;
    });
    req.on('end', function() {
      req.body = JSON.parse(requestData);
      return cb();
    });
  }

  /**
   * Checks the body of the request in order to check the
   * authorization or the correctness.
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  checkBody(req, res, cb) {
    winston.log('debug', 'BaseConnector, checking body.');
    cb();
  }

  /**
   * Given the request, build the input messages.
   * This method is intended to be overrided by the child classes,
   * so they can implement the transformation between the channel
   * format into the Microsoft Bot Framework format. This method is
   * called when receiving messages.
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  getInputMessages(req, res, cb) {
    winston.log('debug', 'BaseConnector, getting input messages.');
    cb(null, req.body);
  }

  /**
   * Given an array of messages, build the output messages.
   * This method is intended to be overrided by the child classes,
   * so they can implement the transformation between the Microsoft
   * Bot Framework and the channel format. This method is called when
   * sending messages.
   *
   * @param messages { Array } Array of messages in the Microsoft format.
   * @param cb { Function } Callback function.
   */
  getOutputMessages(messages, cb) {
    winston.log('debug', 'BaseConnector, getting output messages.');
    cb(null, messages);
  }

  /**
   * Dispatch the incoming messages. This is the main method when receiving
   * messages: transform the messages from the channel into the Microsoft
   * format, and then handle every message.
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  dispatch(req, res, cb) {
    winston.log('debug', 'BaseConnector, dispatching messages.');
    this.getInputMessages(req, res, function(error, messages) {
      if (error) {
        winston.log('error', 'Error dispatching messages:');
        winston.log('error', error);
        return cb(error);
      }
      for (var i = 0; i < messages.length; i++) {
        this.handler([messages[i]]);
      }
      if (this.settings.autoResponse === true) {
        winston.log('debug', 'Autoresponse is ON, sending 200');
        res.status(200);
        res.end();
      }
      cb();
    }.bind(this));
  }

  /**
   * Used by the verify method, this is the point where the request is
   * verified after the body of the request is finally built.
   * So, this method, overrided by the child classes, is where given a
   * "secret" in some part of the request, we can answer a response to
   * tell that the secret is ok, or the secret is wrong.
   *
   * @param req { Object } Request instance
   * @param res { Object } Response instance
   * @param cb { Function } Callback function.
   */
  verifyRequest(req, res, cb) {
    winston.log('debug', 'BaseConnector verifying request.');
    res.status(200);
    res.end();
    cb();
  }

  /**
   * Method to send a message from the bot to the channel.
   * This method must be overrided by the child objects.
   *
   * @param message { Object } Message to be sent.
   * @param cb { Function } Callback function.
   */
  sendMessage(message, cb) {
    winston.log('debug', 'BaseConnector inner send message.');
    cb(null, message);
  }

  /**
   * Method for sending messages from the bot to the channel.
   * This methods transforms the messages from the Microsoft Bot format
   * into the channel format, and then process each message sending
   * it to the channel.
   *
   * @param messages { Array } Array of outcoming messages.
   * @param done { Function } Callback function.
   */
  send(messages, done) {
    winston.log('debug', 'BaseConnector Send messages');
    this.getOutputMessages(messages, function(error, messages) {
      if (error) {
        winston.log('error', 'Error sending messages:');
        winston.log('error', error);
        return done();
      }
      async.mapSeries(messages, this.sendMessage.bind(this),
        function(error, res) {
          if (error) {
            winston.log('error', 'Error sending messages:');
            winston.log('error', error);
          }
          done();
        });
    }.bind(this));
  }

  /**
   * Gets a default incoming message
   *
   * @param channel { String } Name of the channel.
   * @param id { String } Identifier of the message.
   * @param date { Date } Date and time of the message.
   * @param source { Object } Source message.
   * @returns { Object } A default message in Microsoft format.
   */
  getDefaultIncomingMessage(channel, id, date, source) {
    return {
      type: 'message',
      id: id,
      timestamp: moment(date).format(),
      channelId: channel,
      user: {
        id: ''
      },
      text: '',
      attachment: [],
      entities: [],
      sourceEvent: source,
      address: {
        id: id,
        channelId: channel,
        from: {
          id: ''
        },
        recipient: {
          id: ''
        },
        conversation: {
          isGroup: false,
          id: ''
        }
      }
    };
  }
}

export default BaseConnector;