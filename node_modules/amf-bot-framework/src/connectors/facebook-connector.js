import BaseConnector from './base-connector';
import _ from 'lodash';
import request from 'request';
import crypto from 'crypto';
import winston from 'winston';

/**
 * Class for the facebook channel connector.
 */
class FacebookConnector extends BaseConnector {

  /**
   * Constructor of the class.
   *
   * @constructor
   * @param settings { Object } Settings of the connector. It must contains
   *    three properties: verifyToken, accessToken and appSecret.
   */
  constructor(settings) {
    winston.log('info', 'Creating Facebook Connector');
    super(settings);
  }

  /**
   * Used by the verify method, this is the point where the request is
   * verified after the body of the request is finally built.
   * Here we check the verify token in order to be sure that the channel
   * is authorized and know the secret of the conversation.
   *
   * @param req { Object } Request instance
   * @param res { Object } Response instance
   * @param cb { Function } Callback function.
   */
  verifyRequest(req, res, cb) {
    winston.log('debug', 'Verifying facebook request');
    var verifyToken = this.getQueryParameter(req, 'hub.verify_token');
    var challenge = this.getQueryParameter(req, 'hub.challenge');
    if (verifyToken === this.settings.verifyToken) {
      winston.log('debug', 'Facebook request accepted');
      res.send(challenge);
      return cb();
    } else {
      winston.log('warn', 'Facebook wrong token! ' + verifyToken);
      res.send('Wrong token');
      return cb(new Error('Wrong token'));
    }
  }

  /**
   * Checks the body of the request in order to check the
   * authorization or the correctness.
   * In facebook this is done with a hub sinature, so from the body of the
   * request and the application secret, a SHA1 digest is calculated, and
   * the one calculated by the backend must be the same as the one that
   * comes in the header 'x-hub-signature'.
   *
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  checkBody(req, res, cb) {
    winston.log('debug', 'Facebook checking signature');
    var hmac = crypto.createHmac('sha1', this.settings.appSecret);
    hmac.update(JSON.stringify(req.body));
    if (req.headers['x-hub-signature'] !== `sha1=${hmac.digest('hex')}`) {
      winston.log('warn', 'Facebook wrong signature! ' +
        req.headers['x-hub-signature']);
      res.end(JSON.stringify({
        status: 'not ok', error: 'Message integrity check failed'
      }));
      return cb(new Error('Message integrity check failed'));
    }
    return cb();
  }

  /**
   * Generates a Microsoft message from a source facebook message entry.
   *
   * @param source { Object } Facebook message entry.
   * @returns { Object } Microsoft framework message.
   */
  generateInputMessage(source) {
    winston.log('debug', 'Facebook generating input message');
    var time = source.timestamp;
    var date = new Date(time);
    var result = this.getDefaultIncomingMessage('facebook',
      time, date, source);
    result.user.id = source.sender.id;
    result.text = source.message ? (source.message.text || '') : '';
    result.address.from.id = source.sender.id;
    result.address.conversation.id = source.sender.id;
    result.address.recipient.id = source.recipient.id;
    winston.log('debug', 'Source message:');
    winston.log('debug', source);
    winston.log('debug', 'Target message:');
    winston.log('debug', result);
    return result;
  }

  /**
   * Given the request, build the input messages.
   *
   * @param req { Object } Request instance.
   * @param cb { Function } Callback function.
   */
  getInputMessages(req, res, cb) {
    winston.log('debug', 'Facebook getting input messages');
    var messages = _.isArray(req.body) ? req.body : [req.body];
    var result = [];
    for (var i = 0; i < messages.length; i++) {
      var msg = messages[i].entry[0];
      for (var j = 0; j < msg.messaging.length; j++) {
        result.push(this.generateInputMessage(msg.messaging[i]));
      }
    }
    cb(null, result);
  }

  /**
   * Generates a Facebook message from a Microsoft message.
   *
   * @param source { Object } Microsoft message.
   * @returns { Object } Facebook message.
   */
  generateOutputMessage(source) {
    winston.log('debug', 'Facebook generating output message');
    var result = {
      recipient: {
        id: source.address.from.id
      },
      message: {
        text: source.text
      }
    };
    winston.log('debug', 'Source message:');
    winston.log('debug', source);
    winston.log('debug', 'Target message:');
    winston.log('debug', result);
    return result;
  }

  /**
   * Given an array of messages, build the output messages.
   *
   * @param messages { Array } Array of messages in the Microsoft format.
   * @param cb { Function } Callback function.
   */
  getOutputMessages(messages, cb) {
    winston.log('debug', 'Facebook getting output messages');
    var result = [];
    for (var i = 0; i < messages.length; i++) {
      result.push(this.generateOutputMessage(messages[i]));
    }
    cb(null, result);
  }

  /**
   * Method to send a message from the bot to the channel.
   * Sends the message from the bot to the Facebook user.
   *
   * @param message { Object } Message to be sent.
   * @param cb { Function } Callback function.
   */
  sendMessage(message, cb) {
    winston.log('debug', 'Facebook sending message');
    if (_.isArray(message)) {
      message = message[0];
    }
    var obj = {
      url: 'https://graph.facebook.com/v2.6/me/messages',
      qs: {
        'access_token': this.settings.accessToken
      },
      method: 'POST',
      json: message
    };
    request(obj, function(error, response) {
      if (error) {
        winston.log('error', error);
        return cb(error);
      }
      if (response.body.error) {
        winston.log('error', response.body.error);
        return cb(response.body.error);
      }
      return cb(null, response.body);
    });
  }
}

export default FacebookConnector;