'use strict';

import BaseConnector from './base-connector';
import utils from '../bot-utils';
import _ from 'lodash';

/**
 * Class for a REST Connector.
 * Use this connector when you don't want to use the through channels from
 * Microsoft and you just want the bot features throug a REST API.
 */
class RestConnector extends BaseConnector {

  /**
   * Constructor of the class.
   *
   * @constructor
   * @param settings { Object } Settings of the connector. It can
   *    contain a property checkAuth that is a callback function
   *    to check a request.
   */
  constructor(settings) {
    super(settings);
    settings.autoResponse = false;
    this.queue = {};
  }

  /**
   * Checks the body of the request in order to check the
   * authorization or the correctness.
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  checkBody(req, res, cb) {
    if (this.settings && this.settings.checkAuth) {
      this.settings.checkAuth(req, res, cb);
    } else {
      return cb();
    }
  }

  /**
   * Checks the response that will be sent to the user. This method is here
   * in order to allow the developer to modify the response status and body
   * before this information is sent.
   *
   * @param opts { Object } Options passed to the connector constructor.
   * @param res { Object } Express response object.
   * @param messages { Array } Collection of messages to be sent to the response.
   * @param cb { Function } Callback function.
   */
  checkResponse(opts, res, messages, cb) {
    if (opts && opts.checkResponse) {
      opts.checkResponse(res, messages, cb);
    } else {
      cb();
    }
  }

  /**
   * Given the request, build the input messages.
   *
   * @param req { Object } Request instance.
   * @param res { Object } Response instance.
   * @param cb { Function } Callback function.
   */
  getInputMessages(req, res, cb) {
    var messages = req.body;
    this.queue[messages.id] = res;
    messages['useAuth'] = false;
    var list = _.isArray(messages) ? messages : [messages];
    list.forEach(msg => {
      utils.moveFieldsTo(msg, msg, {
        'locale': 'textLocale',
        'channelData': 'sourceEvent'
      });
      msg.text = msg.text || '';
      msg.attachments = msg.attachments || [];
      msg.entities = msg.entities || [];
      msg.entities = msg.entities || [];
      var address = {};
      utils.moveFieldsTo(msg, address, {
        'id': 'id',
        'channelId': 'channelId',
        'from': 'user',
        'conversation': 'conversation',
        'recipient': 'bot',
        'serviceUrl': 'serviceUrl',
        'useAuth': 'useAuth'
      });
      msg.address = address;
      msg.source = address.channelId;
    });
    this.queue[list[0].address.id] = res;
    cb(null, list);
  }

  /**
   * Send messages as response to the endpoint call.
   * Warning: The microsoft bot framework usual connectors works with an
   * incoming listener that automatically responds a 202 empty message, and
   * then the responses are sent to another remote endpoint. To do this
   * REST connector compliant with the needs of the project, we make it
   * to respond in the incoming response object. To do this we are declaring
   * a map where the key is the id of the incoming message and the value is
   * the express response object. So we "hang" the express response, and respond
   * to it when there receive messages from the bot. That means two main things:
   * - If there are no response, it hangs the response until timeot.
   * - If we plan to send a message now, then async call to function, and send
   *   another message later... find another way, because this will close the
   *   response when the first block of response messages are found.
   *
   * @param messages { Array } Array of messages to be sent to as response.
   * @param done { Function } Callback function.
   */
  send(messages, done) {
    var list = Array.isArray(messages) ? messages : [messages];
    var id = list[0].address.id;
    var res = this.queue[id];
    delete this.queue[id];
    if (res) {
      this.checkResponse(this.settings, res, messages, function(error) {
        if (error) {
          res.status(500);
          res.send(error);
        } else {
          res.status(200);
          res.send(messages);
        }
      });
    }
    done();
  }
}

export default RestConnector;