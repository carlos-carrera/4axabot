import builder from 'botbuilder';

/**
 * Given a Hero or Thumbnail card, build the card.
 * This is a transversal functionallity because we avoid the replication
 * of code, gain maintanability, and also can be reused for carousel and
 * list cards.
 *
 * @param session { Object } Chat session.
 * @param card { Object } Card instance.
 * @returns { Object } HeroCard or ThumbnailCard instance filled with the
 *                     information described by the card.
 */
function buildCard(session, card) {
  var resultCard;
  if (card.type === 'hero') {
    resultCard = new builder.HeroCard(session);
  } else if (card.type === 'thumbnail') {
    resultCard = new builder.ThumbnailCard(session);
  } else {
    return null;
  }
  if (card.title) {
    resultCard.title(card.title);
  }
  if (card.subtitle) {
    resultCard.subtitle(card.subtitle);
  }
  if (card.text) {
    resultCard.text(card.text);
  }
  var imageArr = [];
  var i;
  if (card.image) {
    imageArr.push(builder.CardImage.create(session, card.image));
    resultCard.images(imageArr);
  } else if (card.images) {
    for (i = 0; i < card.images.length; i++) {
      imageArr.push(builder.CardImage.create(session, card.images[i]));
    }
    resultCard.images(imageArr);
  }
  if (card.tap) {
    if (card.tap.type.toLowerCase() === 'openurl') {
      resultCard.tap(builder.CardAction.openUrl(session, card.tap.url));
    } else if (card.tap.type.toLowerCase() === 'imback') {
      resultCard.tap(builder.CardAction.imBack(session, card.tap.value));
    }
  }
  if (card.buttons && card.buttons.length > 0) {
    var buttonArr = [];
    for (i = 0; i < card.buttons.length; i++) {
      var button = card.buttons[i];
      if (button.type.toLowerCase() === 'openurl') {
        buttonArr.push(builder.CardAction.openUrl(session,
          button.url, button.title));
      } else if (button.type.toLowerCase() === 'imback') {
        buttonArr.push(builder.CardAction.imBack(session,
          button.value, button.title));
      }
    }
    resultCard.buttons(buttonArr);
  }
  return resultCard;
}

export default { buildCard: buildCard };


