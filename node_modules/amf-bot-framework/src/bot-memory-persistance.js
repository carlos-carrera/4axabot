'use strict';

import winston from 'winston';

/**
 * Basic memory persistance for the bot framework.
 * This is the default persistance of the bots when no other persistance
 * instance is provided. Take into account that if the persistance is
 * in memory, the memory consumption can be huge, and also that all the
 * data will be lost if the bot is restarted.
 */
class BotMemoryPersistance {

  /**
   * Constructor of the class.
   *
   * @constructor
   */
  constructor() {
    this.rootVariables = [];
    this.userVariables = [];
    this.channelVariables = [];
  }

  /**
   * Build the user variables view for the template engine.
   *
   * @param id { String } Identifier of the user.
   * @param cb { Function } Callback function.
   */
  buildUserVariables(id, cb) {
    const variables = this.userVariables.find(x => x.id === id) || {};
    winston.verbose('Build user variables for id %s', id, {userVariables: variables});
    return cb(null, variables);
  }

  /**
   * Build the channel variables view for the template engine.
   *
   * @param id { String } Identifier of the channel.
   * @param cb { Function } Callback function.
   */
  buildChannelVariables(id, cb) {
    const variables = this.channelVariables.find(x => x.id === id) || {};
    winston.verbose('Build channel variables for id %s', id, {channelVariables: variables});
    return cb(null, variables);
  }

  /**
   * Build the root (global) variables view for the template engine.
   *
   * @param cb { Function } Callback function.
   */
  buildRootVariables(cb) {
    winston.verbose('Build root variables', {rootVariables: this.rootVariables});
    return cb(null, this.rootVariables);
  }

  /**
   * Get the value of a user variable.
   *
   * @param id { String } Identifier of the user.
   * @param name { String } Name of the variable.
   * @param cb { Function } Callback function.
   */
  getUserVariable(id, name, cb) {
    const variables = this.userVariables.find(x => x.id === id);
    winston.verbose('Get user variables for id %s', id, {userVariables: variables});
    if (!variables) return cb(null);

    const variable = variables[name];
    winston.verbose('Get user variable %s for id %s', name, id, {userVariable: variable});
    return cb(null, variable);
  }

  /**
   * Get the value of a channel variable.
   *
   * @param id { String } Identifier of the channel.
   * @param name { String } Name of the variable.
   * @param cb { Function } Callback function.
   */
  getChannelVariable(id, name, cb) {
    const variables = this.channelVariables.find(x => x.id === id);
    winston.verbose('Get channel variables for id %s', id, {channelVariables: variables});
    if (!variables) return cb(null);

    const variable = variables[name];
    winston.verbose('Get channel variable %s for id %s', name, id, {channelVariable: variable});
    return cb(null, variable);
  }

  /**
   * Gets the value of a root variable.
   *
   * @param name { String } Name of the variable.
   * @param cb { Function } Callback function.
   */
  getRootVariable(name, cb) {
    const variable = this.rootVariables[name];
    winston.verbose('Get root variable %s', name, {rootVariable: variable});
    return cb(null, variable);
  }

  /**
   * Sets the value of a user variable.
   *
   * @param id { String } Identifier of the user.
   * @param name { String } Name of the variable.
   * @param value { String } Value of the variable.
   * @param cb { Function } Callback function.
   */
  setUserVariable(id, name, value, cb) {
    !this.userVariables.find(x => x.id === id) && (this.userVariables[id] = {});
    this.userVariables[id][name] = value;
    winston.verbose('Set user variable %s=%s for id %s', name, value, id);
    return cb(null, value);
  }

  /**
   * Sets the value of a channel variable.
   *
   * @param id { String } Identifier of the channel.
   * @param name { String } Name of the variable.
   * @param value { String } Value of the variable.
   * @param cb { Function } Callback function.
   */
  setChannelVariable(id, name, value, cb) {
    !this.channelVariables.find(x => x.id === id) && (this.channelVariables[id] = {});
    this.channelVariables[id][name] = value;
    winston.verbose('Set channel variable %s=%s for id %s', name, value, id);
    return cb(null, value);
  }

  /**
   * Sets the value of a root variable.
   *
   * @param name { String } Name of the variable.
   * @param value { String } Value of the variable.
   * @param cb { Function } Callback function.
   */
  setRootVariable(name, value, cb) {
    this.rootVariables[name] = value;
    winston.verbose('Set root variable %s=%s', name, value);
    return cb(null, value);
  }

}

export default BotMemoryPersistance;

