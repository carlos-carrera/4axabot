'use strict';

import request from 'request';

/**
 * Class for a Vision Service, that uses Project Oxford to analyze images.
 */
class VisionService {

  /**
   * Constructor of the class
   *
   * @constructor
   * @param settings { Object } Settins for the instance.
   */
  constructor(settings) {
    if (!settings) {
      settings = {};
    }
    this.settings = settings;
    this.settings.visionApiKey = this.settings.visionApiKey ||
      process.env.MS_COMPUTER_VISION_API_KEY;
    this.settings.faceApiKey = this.settings.faceApiKey ||
      process.env.MS_FACE_API_KEY;
    this.settings.emotionApiKey = this.settings.emotionApiKey ||
      process.env.MS_EMOTION_API_KEY;
  }

  /**
   * Given a parameters object, converts it to an url query.
   *
   * @param parameters { Object } Parameters of the request.
   */
  getQueryParameters(parameters) {
    var result = '';
    if (parameters) {
      for (var name in parameters) {
        result += (result === '') ? '?' : '&';
        result += name + '=' + parameters[name];
      }
    }
    return result;
  }

  /**
   * Creates the request options for a project oxford API call.
   *
   * @param api { String } Name of the API.
   * @param endoint { String } Endpoint of the API to be invoked.
   * @param parameters { String } Parameters of the call.
   * @param apiKey { String } API Key.
   * @param body { Object } Body for the request.
   */
  getOptions(api, endpoint, parameters, apiKey, body) {
    var parameterStr = this.getQueryParameters(parameters);
    return {
      url: 'https://api.projectoxford.ai/' + api + '/v1.0/' + endpoint + parameterStr,
      headers: {
        'Content-Type': 'application/json',
        'Ocp-Apim-Subscription-Key': apiKey
      },
      body: JSON.stringify(body),
      method: 'POST'
    };
  }

  completeAnalyzeImageParameters(parameters) {
    parameters = parameters || {};
    parameters.visualFeatures = parameters.visualFeatures ||
      'Categories,Tags,Description,Faces,ImageType,Color,Adult';
    parameters.details = parameters.details || 'Celebrities';
    return parameters;
  }

  analyzeImage(parameters, body, cb) {
    parameters = this.completeAnalyzeImageParameters(parameters);
    var options = this.getOptions('vision', 'analyze', parameters,
      this.settings.visionApiKey, {url: body});
    request(options, function(error, response, body) {
      if (!error) {
        body = JSON.parse(body);
      }
      return cb(error, body);
    });
  }

  completeFaceDetectionParameters(parameters) {
    parameters = parameters || {};
    parameters.returnFaceAttributes = parameters.returnFaceAttributes ||
      'age,gender,headPose,smile,facialHair,glasses';
    if (parameters.returnFaceLandmarks === undefined) {
      parameters.returnFaceLandmarks = true;
    }
    if (parameters.returnFaceId === undefined) {
      parameters.returnFaceId = true;
    }
    return parameters;
  }

  faceDetection(parameters, body, cb) {
    parameters = this.completeFaceDetectionParameters(parameters);
    var options = this.getOptions('face', 'detect', parameters,
      this.settings.faceApiKey, {url: body});
    request(options, function(error, response, body) {
      if (!error) {
        body = JSON.parse(body);
      }
      return cb(error, body);
    });
  }

  recognizeEmotions(parameters, body, cb) {
    var options = this.getOptions('emotion', 'recognize', parameters,
      this.settings.emotionApiKey, {url: body});
    request(options, function(error, response, body) {
      if (!error) {
        body = JSON.parse(body);
      }
      return cb(error, body);
    });
  }

  getRectId(rect) {
    return rect.left + '-' + rect.top;
  }

  relateImageData(data) {
    if (data.face && data.face.length > 0) {
      var faces = {};
      for (let i = 0; i < data.face.length; i++) {
        data.face[i].rectId = this.getRectId(data.face[i].faceRectangle);
        faces[data.face[i].rectId] = data.face[i];
      }
      if (data.emotion && data.emotion.length > 0) {
        for (let i = 0; i < data.emotion.length; i++) {
          data.emotion[i].rectId = this.getRectId(data.emotion[i].faceRectangle);
          var face = faces[data.emotion[i].rectId];
          if (face) {
            face.emotions = data.emotion[i].scores;
          }
        }
      }
    }
  }

  fullAnalyzeImage(url, cb) {
    var result = {};
    this.analyzeImage({}, url, function(error, responseAnalyze) {
      if (error) {
        return cb(error);
      }
      result.analyze = responseAnalyze;
      this.faceDetection({}, url, function(error, responseFace) {
        if (error) {
          return cb(error);
        }
        result.face = responseFace;
        if (responseFace.length > 0) {
          this.recognizeEmotions({}, url, function(error, responseEmotion) {
            if (error) {
              return cb(error);
            }
            result.emotion = responseEmotion;
            this.relateImageData(result);
            return cb(null, result);
          }.bind(this));
        } else {
          result.emotion = [];
          this.relateImageData(result);
          return cb(null, result);
        }
      }.bind(this));
    }.bind(this));
  }
}

export default VisionService;
