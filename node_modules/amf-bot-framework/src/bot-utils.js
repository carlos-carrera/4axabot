'use strict';

import Handlebars from 'handlebars';
import {isArray, isFunction, isPlainObject, isString} from 'lodash';
import winston from 'winston';

/**
 * Static class for the utils of the bot.
 */
export default class BotUtils {

  /**
   * Make sure than obj is an array. If it's an array, return the object
   * otherwise returns an array containing the obj.
   *
   * @param obj { Object } Input object.
   * @returns { Array } If the object is an array, returns the object. Otherwise
   *    returns a new array containing the object.
   */
  static ensureArray(obj) {
    return isArray(obj) ? obj : [obj];
  }

  /**
   * Performs a deep map of an object, invoking the provided function for
   * the items that are string.
   *
   * @param obj { Object } Object to be visited.
   * @param map { Function } Function to be executed for strings.
   * @param result { Object } the obj mapped
   */
  static deepMap(obj, map, result = {}) {
    for (let key in obj) {
      if (!obj.compiled && isString(obj[key]) && obj[key].includes('{{')) {
        // Inject locale at the end of the i18n key
        const input = obj[key].replace(/\{\{i18n (.*?)\}\}/g, '{{i18n $1 locale=locale}}');
        winston.debug('Compiling template', {key: input});
        obj[key] = Handlebars.compile(input);
      }
      if (isFunction(obj[key])) result[key] = map(obj[key]);
      else if (isArray(obj[key]) || isPlainObject(obj[key])) result[key] = this.deepMap(obj[key], map, isArray(obj[key]) ? [] : {});
      else result[key] = obj[key];
    }
    return result;
  }

  static moveFieldsTo(frm, to, fields) {
    if (frm && to) {
      for (let f in fields) {
        if (frm.hasOwnProperty(f)) {
          if (typeof to[f] === 'function') {
            to[fields[f]](frm[f]);
          } else {
            to[fields[f]] = frm[f];
          }
          delete frm[f];
        }
      }
    }
  }
}
