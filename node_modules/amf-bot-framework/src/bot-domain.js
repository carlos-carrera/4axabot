'use strict';

import BotUtils from './bot-utils';
import winston from 'winston';

/**
 * Domain of the bot. Is the responsible of rendering the messages and object
 * before sending them to the chat session. For doing this, the domain has 3
 * persistance lines: root persistance (globals), user persistance and channel
 * persistance. Also the session message information is added.
 *
 * This four lines (root, user, channel and session) are used as the template
 * variables, and the objects and messages are procesed using Mustache.
 */
class BotDomain {

  /**
   * Constructor of the class.
   *
   * @constructor
   * @param { Object } persistance Persistance instance to be used.
   */
  constructor(persistance) {
    winston.log('info', 'Creating bot domain.');
    this.persistance = persistance;
    this.rootVariables = {};
    this.i18n = {};
  }

  /**
   * Sets a root variable.
   *
   * @param { String } name Name of the variable.
   * @param { String } value Value of the variable.
   */
  setRootVariable(name, value) {
    winston.log('info', 'Setting root variable: ' + name);
    this.rootVariables[name] = value;
  }

  /**
   * Indicates if a root variable exists or not.
   *
   * @param { String } name Name of the variable.
   * @returns { Boolean } True if the variable exists, false otherwise.
   */
  existsRootVariable(name) {
    winston.log('debug', 'Exists root variable: ' + name);
    return (this.rootVariables[name] !== undefined);
  }

  /**
   * Gets the value of a variable given its name.
   *
   * @param { String } name Name of the variable.
   * @returns { String } Value of the variable.
   */
  getRootVariable(name) {
    winston.log('debug', 'Get root variable: ' + name);
    return this.rootVariables[name];
  }

  /**
   * Builds the view for the templating.
   *
   * @param { Object } session Chat session.
   * @param { Function } cb Callback function.
   */
  buildView(session, cb) {
    winston.verbose('Build view');
    const result = {};
    result.root = this.rootVariables;
    result.message = session.message;

    if (this.persistance) {
      this.persistance.buildUserVariables(session.message.address.user.id, (error, userVars) => {
        if (error) {
          winston.error('Error getting user variables', error);
          return cb(error);
        }

        result.user = {};
        winston.debug('Adding user variables', userVars);
        userVars.forEach(userVar => (result.user[userVar.name] = userVar.value));
        winston.verbose('Added user variables in result', result);

        winston.debug('Adding locale');
        result.locale = result.user['locale'] || this.rootVariables['locale'];
        winston.verbose('Added locale in view', result);

        if (session.message.address.conversation.isGroup) {
          this.persistance.buildChannelVariables(session.message.address.conversation.id, (error, channelVars) => {
            if (error) {
              winston.error('Error getting channel variables', error);
              return cb(error);
            }

            result.channel = {};
            winston.debug('Adding channel variables', channelVars);
            channelVars.forEach(channelVar => (result.channel[channelVar.name] = channelVar.value));
            winston.verbose('Added channel variables in result', result);

            winston.verbose('Build view final result', result);
            return cb(null, result);
          });

        } else {
          winston.verbose('Build view final result', result);
          return cb(null, result);
        }
      });

    } else {
      winston.verbose('Build view final result (no persistance)', result);
      return cb(null, result);
    }
  }

  /**
   * Render an object using the template system.
   *
   * @param { Object } session Chat session.
   * @param { Object } object Object to be processed.
   * @param { Function } cb Callback function.
   */
  renderObj(session, object, cb) {
    winston.debug('Render object');
    this.buildView(session, (error, view) => {
      if (error) {
        winston.error('Render object build view error', {error});
        return cb(error);
      }
      winston.verbose('Render object using view', {view});

      const result = BotUtils.deepMap(object, template => {
        const rendered = template(view);
        winston.debug('Rendered object entry', {template, rendered});
        return rendered;
      });
      object.compiled = true;

      winston.info('Rendered object', {result});
      cb(null, result);
    });
  }

  /**
   * Sets the value of an user variable.
   *
   * @param { String } id Identifier of the user.
   * @param { String } name Variable name.
   * @param { String } value Variable value.
   * @param { Function } cb Callback function.
   */
  setUserVariable(id, name, value, cb) {
    winston.log('debug', 'Setting user variable. Name: ' + name + ' User: ' + id);
    this.persistance.setUserVariable(id, name, value, cb);
  }

  /**
   * Sets the value of a channel variable.
   *
   * @param { String } id Identifier of the channel.
   * @param { String } name Variable name.
   * @param { String } value Variable value.
   * @param { Function } cb Callback function.
   */
  setChannelVariable(id, name, value, cb) {
    winston.log('debug', 'Setting channel variable. Name: ' + name +
      ' Channel: ' + id);
    this.persistance.setChannelVariable(id, name, value, cb);
  }
}

export default BotDomain;
