var JiraApi = require('jira').JiraApi;
var async = require('async');
var url = require('url');

function doRequest(options, callback) {
    if (!options.headers) {
        options.headers = {};
    }
    options.headers.Cookie = this.cookie;
    this.request(options, callback);
}

var JiraService = function () {
    this.jira = new JiraApi('https', process.env.JIRA_API_URL || 
      'axagroupsolutions.atlassian.net', '443',
        undefined, undefined, '2', true);
    this.cookie = process.env.JIRA_COOKIE;
    this.jira.cookie = this.cookie; 
    this.jira.doRequest = doRequest.bind(this.jira);
};

JiraService.prototype.getIssueExpanded = function (id, cb) {
    this.jira.findIssue(id + '?expand=changelog', cb);
};

/**
 * Gets the user action from the array of user actions given the
 * name of the user.
 *
 * @param userActions { Array } Array of user actions.
 * @param name { String } Name of the user.
 * @param displayName { String } Display name of the user.
 * @returns { Object } User action of the given user.
 */
JiraService.prototype.getUserAction = function(userActions, name,
    displayName) {
    for (var i = 0; i < userActions.length;i++) {
        if (userActions[i].userName === name) {
            return userActions[i];
        }
    }
    var obj = {
        userName: name,
        displayName: displayName,
        inProgress: [],
        done: []
    };
    userActions.push(obj);
    return obj;
};

/**
 * Gets the user actions from the JIRA issues.
 *
 * @param configuration { Object } Configuration of the JIRA for the team.
 * @param issues { Array } Array of issues found in the JIRA.
 * @param cb { Function } Callback.
 */
JiraService.prototype.getUserActions =
    function(issues, cb) {
    var userActions = [];
    var minDate = new Date();
        var now = new Date();
        now = new Date(now.getUTCFullYear(), now.getUTCMonth(),
            now.getUTCDate());
        if (now.getDay() === 0) {
            minDate.setDate(now.getDate()-2);
        } else if (now.getDay() === 1) {
            minDate.setDate(now.getDate()-3);
        } else {
            minDate.setDate(now.getDate()-1);
        }
        minDate.setHours(0);
        minDate.setMinutes(0);
    var userAction;
    for (var i = 0; i < issues.length; i++) {
        var issue = issues[i];
        var task = {
            id: issue.id,
            key: issue.key,
            summary: issue.fields.summary,
            status: issue.fields.status.name,
            assignee: issue.fields.assignee
        };
        if (task.status === 'In Progress') {
            if (task.assignee) {
                userAction = this.getUserAction(userActions,
                    task.assignee.name, task.assignee.displayName);
                userAction.inProgress.push(task);
            } else {
                // dialog.addResponse('Warning: The task '+task.key+
                //     ' is In Progress but nobody is assigned to do it. ('+
                //     task.summary+')');
            }
        }
        if (issue.changelog && issue.changelog.histories) {
            var changelog = issue.changelog.histories;
            for (var j = 0; j < changelog.length; j++) {
                var change = changelog[j];
                var date = new Date(change.created);
                if (date > minDate) {
                    if (change.items && change.items.length>0 &&
                        change.items[0].field === 'status') {
                        userAction = this.getUserAction(userActions,
                            change.author.name, change.author.displayName);
                        var action = {
                            srcStatus: change.items[0].fromString,
                            tgtStatus: change.items[0].toString,
                            task: task
                        };
                        userAction.done.push(action);
                    }
                }
            }
        }
    }
    return cb(null, userActions);
};

JiraService.prototype.getAllIssues = function (projectId, sprint, cb) {
    var jql = 'project=' + projectId + ' and Sprint="' + sprint + '"';
    this.jira.searchJira(jql, { maxResults: 1000, expand: 'changelog' },
        function (error, response) {
            if (error) {
                return cb(error);
            }
            var issueIds = [];
            for (var i = 0; i < response.issues.length; i++) {
                issueIds.push(response.issues[i].id);
            }
            async.map(issueIds, this.getIssueExpanded.bind(this),
                function (error, issueList) {
                    if (error) {
                        return cb(error);
                    }
                    this.getUserActions(issueList, function(err, result) {
                        return cb(err, result);
                    });
                }.bind(this));

        }.bind(this));
};

var instance = new JiraService();

module.exports = instance;
