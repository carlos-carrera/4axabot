var cards = require('./bot-cards');
var builder = require('botbuilder');
var uuid = require('node-uuid');
var BotCore = require('../../../../lib/bot-core');
var fs = require('fs');
var cognitive = require('../services/cognitive');
var jiraService = require('../services/jira-service');
var weather = require('../services/weather');
var winston = require('winston');

module.exports = {
    reactChoiceListStyle: function(session, args, next) {
        var tag = this.getSelectedChoice(session, args);
        var card = cards.promptOptions;
        card.subtype = tag;
        this.send(session, [card], function(error, dataSent) {
        });
    },
    analyzeImage: function(session, args, next) {
        var url = session.dialogData.lastAttachmentUrl;
        winston.log('Inside analyze image');
        winston.log('the url is '+url);
        cognitive.analyzeImage(undefined, url, function(error, response) {
            var str = '';
            var i;
            if (error) {
                winston.log('error analyzing: '+error);
                str = 'Error analyzing image';
                session.send(str);
                next();
            } else {
                winston.log('analyzed!');
                winston.log(response);
                if (response.metadata) {
                    str += 'The image format is '+response.metadata.format+
                      '. \n\n';
                    str += 'The dimensions are '+response.metadata.width+'x'+
                      response.metadata.height+'. \n\n';
                }
                if (response.description) {
                    if (response.description.captions && 
                      response.description.captions.length > 0) {
                        str += 'Description: '+
                          response.description.captions[0].text+
                          ' (confidence: '+
                          response.description.captions[0].confidence+
                          ')\n\n';
                    }
                    str += 'Description tags: ';
                    for (i = 0; i < response.description.tags.length; i++) {
                        if (i>0) str +=', ';
                        str += response.description.tags[i];
                    }
                    str += '\n\n';
                }
                if (response.categories) {
                    str += 'Categories: ';
                    for (i = 0; i < response.categories.length; i++) {
                        if (i > 0) str+=', ';
                        str += response.categories[i].name + '(score: '+
                          response.categories[i].score+')';
                    }
                    str += '\n\n';
                }
                if (response.adult) {
                    str += 'Is adult content: '+response.adult.isAdultContent+
                      ' (confidence: '+response.adult.adultScore+')\n\n';
                    str += 'Is racy content: '+response.adult.isRacyContent+
                      ' (confidence: '+response.adult.racyScore+')\n\n';
                }
                if (response.tags) {
                    str += 'Tags: ';
                    for (i = 0; i< response.tags.length; i++) {
                        if (i > 0) str += ', ';
                        str += response.tags[i].name+
                          ' (confidence: '+response.tags[i].confidence+')';
                    }
                    str += '\n\n';
                }
                cognitive.faceDetection(undefined, url, 
                  function(error, responseFace) {
                    cognitive.recognizeEmotions(undefined, url, 
                      function(error, responseEmotion) {
                        if (!responseFace || responseFace.length === 0) {
                            str += 'No faces detected.\n\n';
                        } else {
                            str += 'Faces detected: '+responseFace.length+
                              '\n\n';
                            for (var i = 0; i < responseFace.length; i++) {
                                str += 'Face '+(i+1)+': is a '+
                                  responseFace[i].faceAttributes.gender+
                                  ' of '+responseFace[i].faceAttributes.age+
                                  ' years.';
                                if (i < responseEmotion.length) {
                                    str += 'Emotions: ';
                                    var emotion = responseEmotion[i];
                                    var isFirst = true;
                                    for (var name in emotion.scores) {
                                        if (isFirst) {
                                            isFirst = false;
                                        } else {
                                            str+=', ';
                                        }
                                        str += name+' '+
                                          (emotion.scores[name]*100)
                                          .toFixed(0)+'%';
                                    }
                                }
                                str += '\n\n';
                            }
                        }
                        session.send(str);
                        next();
                    });
                });
            }
        });
    },
    thumbnailImage: function(session, args, next) {
        var width = session.dialogData.width;
        var height = session.dialogData.height;
        var url = session.dialogData.lastAttachmentUrl;
        cognitive.thumbnailImage(width, height, url, function(error, response) {
            if (error) {
                winston.log('ERROR: '+error);
                next();
            } else {
                var filename = uuid.v4()+'.jpg';
                winston.log(filename);
                var wstream = fs.createWriteStream('./client/images/'+filename);
                wstream.write(response);
                wstream.end();     
                var attach = { 
                    contentType: 'image/jpeg',
                    contentUrl: BotCore.instance.domain.getRootVariable('url')+
                      '/images/'+filename 
                };
                var msg = new builder.Message(session)
                    .text('Here you go!');
                msg.addAttachment(attach);
                session.send(msg);
                next();
            }
        });
    },
    spellCheck: function(session, args, next) {
        var text = session.dialogData.text;
        cognitive.spellCheck(undefined, text, function(error, response) {
            if (error) {
                winston.log('ERROR: '+error);
                next();
            } else {
                winston.log(response);
                var msg = new builder.Message(session)
                    .text('Corrected: '+response);
                session.send(msg);
                next();
            }
        });
    },
    checkJira: function(session, args, next) {
        jiraService.getAllIssues('16700', 'Sprint 15', function(error, data) {
            if (error) {
                winston.log(error);
            }
            winston.log(data);
            var s = '';
            var j;
            for (var i = 0; i < data.length; i++) {
                var action = data[i];
                s+=action.displayName+'\n\n';
                if (action.inProgress.length === 0) {
                    s+='    - Currently is doing: No task identified\n\n';
                } else if (action.inProgress.length === 1) {
                    s+='    - Currently is doing: Task '+
                      action.inProgress[0].key+'('+
                      action.inProgress[0].summary+')\n\n';
                } else {
                    for (j = 0; j< action.inProgress.length; j++) {
                        s+='        Task '+action.inProgress[j].key+
                        '('+action.inProgress[j].summary+')\n\n';
                    }
                }
                if (action.done.length === 0) {
                    s+= '    - No more actions identified.\n\n';
                } else {
                    s+= '    - Yesterday actions:\n\n';
                    for (j = 0; j < action.done.length; j++) {
                        s+= '        * Changed state of Task '+
                          action.done[j].task.key+' from '+
                          action.done[j].srcStatus+' to '+
                          action.done[j].tgtStatus+' ('+
                          action.done[j].task.summary+')\n\n';
                    }
                }
            }
            var msg = new builder.Message(session)
                .text(s);
            session.send(msg);
            next();
        });   
    },
    getWeather: function(session, args, next) {
        var location = '';
        if (args && args.intent && args.entities && args.entities.length > 0) {
            location = args.entities[0].entity;
        } else {
            location = session.dialogData.location;
        }
        weather.getWeather(location, function(error, data) {
            var s = 'Temperature is:'+data.main.temp+'\n\n';
            s += 'Weather: '+data.weather[0].description+'\n\n';
            var msg = new builder.Message(session)
                .text(s);
            session.send(msg);
            next();
        });
    },
    showBmi: function(session, args, next) {
        var height = session.dialogData.height/100;
        var weight = session.dialogData.weight;
        var bmi = weight/(height*height);         
        session.send('Your calculated BMI is: '+bmi.toFixed(0));
        next();       
    },
    sendReceipt: function(session, args, next) {
        var msg = new builder.Message(session)
            .attachments([
                new builder.ReceiptCard(session)
                    .title('Jes√∫s Seijas')
                    .items([
                        builder.ReceiptItem.create(session, '$22.00', 
                          'Wellbe Assurance')
                          .image(builder.CardImage.create(session, 
                          'https://agsbotdemo.herokuapp.com/images/'+
                          'wellbe.png')),
                        builder.ReceiptItem.create(session, '$22.00', 
                          'Health Assurance').image(
                          builder.CardImage.create(session, 
                          'https://agsbotdemo.herokuapp.com/images/'+
                          'health.png'))
                    ])
                    .facts([
                        builder.Fact.create(session,'1234567890', 
                          'Order Number'),
                        builder.Fact.create(session, 'VISA 4076', 
                          'Payment Method'),
                        builder.Fact.create(session, 'Delivery', 
                          'Delivery Method')
                    ])
                    .tax('$4.40')
                    .total('$48.40')
            ]);
        session.send(msg);
        next();
    },
    reactPrompt: function(session, args, next) {
        this.getPromptResponse(session, args, function(error, response) {
            var card = {
                type: 'text',
                text: 'You entered: '+JSON.stringify(response)
            };
            this.send(session, card, 
              function(error, dataSent) {
                next();
            }.bind(this));
        }.bind(this));
    }
};
