/**
 * Class for the bot persistance using loopback application.
 *
 * @constructor
 * @param app { Object } Loopback application object.
 */
var BotLoopbackPersistance = function(app) {
  this.app = app;
  this.preloadRootVariables(() => {});
};

/**
 * Given a type of variables and the id (example: 'user' and userId) retrieves
 * the variables from the database.
 *
 * @param type { String } Variable scope type. (root, user, channel, session)
 * @param id { String } Identifier for the filter.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.build = function(type, id, cb) {
  this.app.models.Variable.find({where: {type: type, srcid: id}},
    function(error, result) {
      if (error) {
        return cb(error);
      }
      return cb(error, result);
    });
};

/**
 * Given the type, idenfier and name of a variable, retrieves the value
 * of the variable from database.
 *
 * @param type { String } Variable scope type.
 * @param id { String } Identifier for the filter.
 * @param name { String } Name of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.getVariable = function(type, id, name, cb) {
  this.app.models.Variable.find(
    {where: {type: type, srcid: id, name: name}},
    function(error, result) {
      if (error) {
        return cb(error);
      }
      if (result && result.length > 0) {
        return cb(error, result[0].value);
      } else {
        return cb(error, undefined);
      }
    });
};

/**
 * Given the type, identifier, name and new value of a variable, sets
 * the value of the variable into database.
 *
 * @param type { String } Variable scope type.
 * @param id { String } Identifier for the filter.
 * @param name { String } Name of the variable.
 * @param value { String } Value of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.setVariable =
  function(type, id, name, value, cb) {
    this.app.models.Variable.find(
      {where: {type: type, srcid: id, name: name}},
      function(error, result) {
        if (error) {
          return cb(error);
        }
        var r;
        if (result && result.length > 0) {
          r = result[0];
          r.value = value;
        } else {
          r = {
            type: 'user',
            srcid: id,
            name: name,
            value: value
          };
        }
        this.app.models.Variable.upsert(r, function(error, result) {
          return cb(error, result);
        });
      }.bind(this));
  };

/**
 * Gets a variable from the user scope, given the user identifier and
 * the variable name.
 *
 * @param id { String } Unique identifier of the user.
 * @param name { String } Name of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.getUserVariable = function(id, name, cb) {
  this.getVariable('user', id, name, cb);
};

/**
 * Sets a variable of the user scope, given the user identifier, the
 * variable name and the variable value.
 *
 * @param id { String } Unique idenfier of the user.
 * @param name { String } Name of the variable.
 * @param value { String } Value of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.setUserVariable =
  function(id, name, value, cb) {
    this.setVariable('user', id, name, value, cb);
  };

/**
 * Build the user variables of a given users from database.
 *
 * @param id { String } Unique identifier of the user.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.buildUserVariables = function(id, cb) {
  this.build('user', id, cb);
};

/**
 * Gets a variable from the channel scope, given the channel identifier and
 * the variable name.
 *
 * @param id { String } Unique identifier of the channel.
 * @param name { String } Name of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.getChannelVariable = function(id, name, cb) {
  this.getVariable('channel', id, name, cb);
};

/**
 * Sets a variable of the channel scope, given the channel identifier, the
 * variable name and the variable value.
 *
 * @param id { String } Unique idenfier of the user.
 * @param name { String } Name of the variable.
 * @param value { String } Value of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.setChannelVariable =
  function(id, name, value, cb) {
    this.setVariable('channel', id, name, value, cb);
  };

/**
 * Build the channel variables for a given channel.
 *
 * @param id { String } Unique channel identifier.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.buildChannelVariables = function(id, cb) {
  this.build('channel', id, cb);
};

/**
 * Gets a variable from the root scope.
 *
 * @param name { String } Name of the variable.
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.getRootVariable = function(name, cb) {
  this.getVariable('root', '0', name, cb);
};

/**
 * Sets a root variable.
 *
 * @param name { String } Name of the variable.
 * @param value { String } Value of the variable.
 * @parma cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.setRootVariable = function(name, value, cb) {
  this.setVariable('root', '0', name, value, cb);
};

/**
 * Build the root variables.
 *
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.buildRootVariables = function(cb) {
  this.build('root', '0', cb);
};

/**
 * Preload the root variables.
 *
 * @param cb { Function } Callback function.
 */
BotLoopbackPersistance.prototype.preloadRootVariables = function(cb) {
  this.buildRootVariables(function(error, values) {
    this.rootVariables = values;
  });
};

module.exports = BotLoopbackPersistance;
