/* global expect */
'use strict';

import noop from 'lodash/noop';

import BotUtils from 'src/bot-utils.js';
import BotCore from 'src/bot-core.js';

describe('BotUtils', () => {
  const locales = ['en', 'fr'];
  before(() => (new BotCore({locales, i18nFolder: './test/fixtures/locales'})));

  it('should keep same structure with a compiled flag', () => {
    const object = {a: 1, b: {c: 3, d: {e: 5}}, f: 6};
    const result = BotUtils.deepMap(object, noop);
    expect(Object.keys(object)).to.have.lengthOf(3);
    expect(Object.keys(object.b)).to.have.lengthOf(2);
    expect(Object.keys(object.b.d)).to.have.lengthOf(1);
    expect(Object.keys(result)).to.have.lengthOf(3);
    expect(Object.keys(result.b)).to.have.lengthOf(2);
    expect(Object.keys(result.b.d)).to.have.lengthOf(1);
  });

  it('should deeply modify original object\'s strings to handlebars functions', () => {
    const object = {num: 1, str: 'toto', tpl: '{{toto}}', func: () => 2, obj: {}, arr: []};
    BotUtils.deepMap(object, noop);
    expect(object.num).to.be.a('number');
    expect(object.str).to.be.a('string');
    expect(object.tpl).to.be.a('function');
    expect(object.func).to.be.a('function');
    expect(object.obj).to.be.an('object');
    expect(object.arr).to.be.an('array');
  });

  it('should map object executing its functions', () => {
    const object = {num: 1, str: 'toto', tpl: '{{toto}}', func: () => 2, obj: {}, arr: []};
    const result = BotUtils.deepMap(object, f => f());
    expect(result.num).to.equal(1);
    expect(result.str).to.equal('toto');
    expect(result.tpl).to.equal('');
    expect(result.func).to.equal(2);
    expect(result.obj).to.eql({});
    expect(result.arr).to.eql([]);
  });

  it('should deeply map object executing its functions with templating entries', () => {
    const object = {
      age: 12,
      complete: '{{firstname}} {{lastname}}',
      hello: () => 'hello',
      address: {
        number: '15',
        street: '{{address.street}}',
        city: '{{address.city}}'
      },
      numbers: ['1', '{{two}}', () => '3']
    };
    const data = {firstname: 'foo', lastname: 'bar', address: {street: 'baz', city: 'qux'}, two: 2};

    const result = BotUtils.deepMap(object, f => f(data));

    expect(result.age).to.equal(12);
    expect(result.complete).to.equal('foo bar');
    expect(result.hello).to.equal('hello');
    expect(result.address.number).to.equal('15');
    expect(result.address.street).to.equal('baz');
    expect(result.address.city).to.equal('qux');
    expect(result.numbers).to.eql(['1', '2', '3']);
  });

  it('should map object handling multiple languages with fallback', () => {
    const object = {message: '{{i18n "welcome.title" firstname=firstname lastname=lastname}}'};
    const data = {firstname: 'foo', lastname: 'bar'};

    data.locale = 'en';
    expect(BotUtils.deepMap(object, f => f(data)).message).to.equal('Welcome foo bar');

    data.locale = 'fr';
    expect(BotUtils.deepMap(object, f => f(data)).message).to.equal('Bonjour foo bar');
  });

  it('should map object handling male/female', () => {
    const object = {message: '{{i18n "menu.help" context=gender}}'};
    expect(BotUtils.deepMap(object, f => f({gender: 'male'})).message).to.equal('Help him!');
    expect(BotUtils.deepMap(object, f => f({gender: 'female'})).message).to.equal('Help her!');
  });

  it('should map object handling different context (not only male/female bit also a status...)', () => {
    const object = {message: '{{i18n "status.text" context=status}}'};
    expect(BotUtils.deepMap(object, f => f({status: 'ok'})).message).to.equal('Seems ok');
    expect(BotUtils.deepMap(object, f => f({status: 'ko'})).message).to.equal('Seems ko');
    expect(BotUtils.deepMap(object, f => f({status: 'wait'})).message).to.equal('Please wait');
  });

  it('should map object handling singular/plural', () => {
    const object = {message: '{{i18n "menu.help" context=gender count=number}}'};
    expect(BotUtils.deepMap(object, f => f({gender: 'male', number: 1})).message).to.equal('Help him!');
    expect(BotUtils.deepMap(object, f => f({gender: 'female', number: 1})).message).to.equal('Help her!');
    expect(BotUtils.deepMap(object, f => f({gender: 'male', number: 2})).message).to.equal('Help them (2)!');
    expect(BotUtils.deepMap(object, f => f({gender: 'female', number: 3})).message).to.equal('Help them (3)!');
  });
});
